# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import hermes_pb2 as hermes__pb2


class GatewayStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetPlayer = channel.unary_unary(
            "/Gateway/GetPlayer",
            request_serializer=hermes__pb2.Login.SerializeToString,
            response_deserializer=hermes__pb2.Player.FromString,
        )
        self.GetTimeranges = channel.unary_unary(
            "/Gateway/GetTimeranges",
            request_serializer=hermes__pb2.Login.SerializeToString,
            response_deserializer=hermes__pb2.Timeranges.FromString,
        )
        self.PutTimeranges = channel.unary_unary(
            "/Gateway/PutTimeranges",
            request_serializer=hermes__pb2.Timeranges.SerializeToString,
            response_deserializer=hermes__pb2.Timeranges.FromString,
        )
        self.SetTimeranges = channel.unary_unary(
            "/Gateway/SetTimeranges",
            request_serializer=hermes__pb2.Timeranges.SerializeToString,
            response_deserializer=hermes__pb2.Empty.FromString,
        )
        self.DeleteTimeranges = channel.unary_unary(
            "/Gateway/DeleteTimeranges",
            request_serializer=hermes__pb2.Timeranges.SerializeToString,
            response_deserializer=hermes__pb2.Empty.FromString,
        )


class GatewayServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetPlayer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetTimeranges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PutTimeranges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SetTimeranges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteTimeranges(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_GatewayServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetPlayer": grpc.unary_unary_rpc_method_handler(
            servicer.GetPlayer,
            request_deserializer=hermes__pb2.Login.FromString,
            response_serializer=hermes__pb2.Player.SerializeToString,
        ),
        "GetTimeranges": grpc.unary_unary_rpc_method_handler(
            servicer.GetTimeranges,
            request_deserializer=hermes__pb2.Login.FromString,
            response_serializer=hermes__pb2.Timeranges.SerializeToString,
        ),
        "PutTimeranges": grpc.unary_unary_rpc_method_handler(
            servicer.PutTimeranges,
            request_deserializer=hermes__pb2.Timeranges.FromString,
            response_serializer=hermes__pb2.Timeranges.SerializeToString,
        ),
        "SetTimeranges": grpc.unary_unary_rpc_method_handler(
            servicer.SetTimeranges,
            request_deserializer=hermes__pb2.Timeranges.FromString,
            response_serializer=hermes__pb2.Empty.SerializeToString,
        ),
        "DeleteTimeranges": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteTimeranges,
            request_deserializer=hermes__pb2.Timeranges.FromString,
            response_serializer=hermes__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Gateway", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Gateway(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetPlayer(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Gateway/GetPlayer",
            hermes__pb2.Login.SerializeToString,
            hermes__pb2.Player.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetTimeranges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Gateway/GetTimeranges",
            hermes__pb2.Login.SerializeToString,
            hermes__pb2.Timeranges.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PutTimeranges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Gateway/PutTimeranges",
            hermes__pb2.Timeranges.SerializeToString,
            hermes__pb2.Timeranges.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SetTimeranges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Gateway/SetTimeranges",
            hermes__pb2.Timeranges.SerializeToString,
            hermes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def DeleteTimeranges(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Gateway/DeleteTimeranges",
            hermes__pb2.Timeranges.SerializeToString,
            hermes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class SchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyUpdated = channel.unary_unary(
            "/Scheduler/NotifyUpdated",
            request_serializer=hermes__pb2.Event.SerializeToString,
            response_deserializer=hermes__pb2.Empty.FromString,
        )


class SchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifyUpdated(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_SchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "NotifyUpdated": grpc.unary_unary_rpc_method_handler(
            servicer.NotifyUpdated,
            request_deserializer=hermes__pb2.Event.FromString,
            response_serializer=hermes__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "Scheduler", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Scheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifyUpdated(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/Scheduler/NotifyUpdated",
            hermes__pb2.Event.SerializeToString,
            hermes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )


class EventDbStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetMagicToken = channel.unary_unary(
            "/EventDb/GetMagicToken",
            request_serializer=hermes__pb2.GetMagicTokenRequest.SerializeToString,
            response_deserializer=hermes__pb2.GetMagicTokenResponse.FromString,
        )
        self.GetEvents = channel.unary_unary(
            "/EventDb/GetEvents",
            request_serializer=hermes__pb2.Empty.SerializeToString,
            response_deserializer=hermes__pb2.GetEventsResponse.FromString,
        )
        self.GetEventPlayers = channel.unary_unary(
            "/EventDb/GetEventPlayers",
            request_serializer=hermes__pb2.GetEventPlayersRequest.SerializeToString,
            response_deserializer=hermes__pb2.GetEventPlayersResponse.FromString,
        )
        self.SyncEventPlayers = channel.unary_unary(
            "/EventDb/SyncEventPlayers",
            request_serializer=hermes__pb2.SyncEventPlayerRequest.SerializeToString,
            response_deserializer=hermes__pb2.Empty.FromString,
        )


class EventDbServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetMagicToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEvents(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def GetEventPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def SyncEventPlayers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_EventDbServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "GetMagicToken": grpc.unary_unary_rpc_method_handler(
            servicer.GetMagicToken,
            request_deserializer=hermes__pb2.GetMagicTokenRequest.FromString,
            response_serializer=hermes__pb2.GetMagicTokenResponse.SerializeToString,
        ),
        "GetEvents": grpc.unary_unary_rpc_method_handler(
            servicer.GetEvents,
            request_deserializer=hermes__pb2.Empty.FromString,
            response_serializer=hermes__pb2.GetEventsResponse.SerializeToString,
        ),
        "GetEventPlayers": grpc.unary_unary_rpc_method_handler(
            servicer.GetEventPlayers,
            request_deserializer=hermes__pb2.GetEventPlayersRequest.FromString,
            response_serializer=hermes__pb2.GetEventPlayersResponse.SerializeToString,
        ),
        "SyncEventPlayers": grpc.unary_unary_rpc_method_handler(
            servicer.SyncEventPlayers,
            request_deserializer=hermes__pb2.SyncEventPlayerRequest.FromString,
            response_serializer=hermes__pb2.Empty.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "EventDb", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class EventDb(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetMagicToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EventDb/GetMagicToken",
            hermes__pb2.GetMagicTokenRequest.SerializeToString,
            hermes__pb2.GetMagicTokenResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEvents(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EventDb/GetEvents",
            hermes__pb2.Empty.SerializeToString,
            hermes__pb2.GetEventsResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def GetEventPlayers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EventDb/GetEventPlayers",
            hermes__pb2.GetEventPlayersRequest.SerializeToString,
            hermes__pb2.GetEventPlayersResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def SyncEventPlayers(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/EventDb/SyncEventPlayers",
            hermes__pb2.SyncEventPlayerRequest.SerializeToString,
            hermes__pb2.Empty.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
